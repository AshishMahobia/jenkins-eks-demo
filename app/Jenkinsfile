pipeline {
    agent any

    environment {
        ECR_REPO = "442426870084.dkr.ecr.us-east-1.amazonaws.com/my-app-repo"
        AWS_REGION = "us-east-1"
        NEW_TAG = "${env.BUILD_NUMBER}"  // Use Jenkins build number for a unique tag
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/AshishMahobia/jenkins-eks-demo.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -t $ECR_REPO:$NEW_TAG -f app/Dockerfile app/'
                }
            }
        }

        stage('Push to AWS ECR') {
            steps {
                script {
                    sh 'aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO'
                    sh 'docker push $ECR_REPO:$NEW_TAG'
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                script {
                    // Authenticate with AWS EKS
                    sh 'aws eks update-kubeconfig --region $AWS_REGION --name my-cluster'

                    // Verify cluster access
                    sh 'kubectl get nodes'

                    // ðŸ”¹ Apply Kubernetes manifests first to ensure deployment exists
                    sh 'kubectl apply -f app/k8s-deployment.yaml --validate=false'

                    // ðŸ”¹ Update Deployment with new image tag
                    sh 'kubectl set image deployment/my-app my-app=$ECR_REPO:$NEW_TAG --record'

                    // Wait for deployment to roll out successfully
                    sh 'kubectl rollout status deployment/my-app'
                }
            }
        }
    }
}
